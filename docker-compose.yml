# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required
name: csadmin

services:
  vote:
    container_name: vote
    build: ./vote
    # use python rather than gunicorn for local dev
    command: python app.py
    depends_on:
      redis:
        condition: service_healthy
    healthcheck: 
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
     - ./vote:/app
    ports:
      - "10100:80"
    networks:
      - front-tier
      - back-tier

  result:
    container_name: result
    build: ./result
    # use nodemon rather than node for local dev
    entrypoint: nodemon server.js
    depends_on:
      db:
        condition: service_healthy 
    volumes:
      - ./result:/app
    ports:
      - "10101:80"
      - "10102:5858"
    networks:
      - front-tier
      - back-tier

  worker:
    container_name: worker
    build:
      context: ./worker
    depends_on:
      redis:
        condition: service_healthy 
      db:
        condition: service_healthy 
    networks:
      - back-tier

  redis:
    container_name: redis
    image: redis:alpine
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    networks:
      - back-tier

  db:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - ./postgres/data:/var/lib/postgresql/data:rw
      - ./healthchecks:/healthchecks
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    container_name: seed
    build: ./seed-data
    profiles: ["seed"]
    depends_on:
      vote:
        condition: service_healthy 
    networks:
      - front-tier
    restart: "no"

  # monitoring services below
  # they won't run unless you specify the "monitoring" profile

  prometheus:
    container_name: prometheus
    profiles:
      - monitoring
    image: prom/prometheus
    volumes:
      - ./monitoring/prometheus/config.yml:/etc/prometheus/prometheus.yml:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
     - 10111:9090

  cadvisor:
    container_name: cadvisor
    profiles:
      - monitoring
    image: gcr.io/cadvisor/cadvisor
    ports:
      - 10112:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  grafana:
    container_name: grafana
    profiles:
      - monitoring
    image: grafana/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_pass
    volumes:
      - ./monitoring/grafana/data:/var/lib/grafana:rw
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    ports:
      - 10110:3000

  node-exporter:
    container_name: node_exporter
    profiles:
      - monitoring
    image: prom/node-exporter
    ports:
      - 10113:9100

volumes:
  db-data:

networks:
  front-tier:
  back-tier:
